public function deleteOrderLine($param)
{
    $result = array();
    $orderLineID = $param['id'];

    // Prüfe die Verbindung zur Datenbank
    if (!$this->dh->checkConnection()) {
        $result["error"] = "Versuchen Sie es später erneut!";
        return $result;
    }

    // Retrieve the receipt ID associated with the deleted order line
    $stmt = $this->dh->db_obj->prepare("SELECT `receipt_id` FROM `orderlines` WHERE `id` = ?");
    $stmt->bind_param("i", $orderLineID);
    $stmt->execute();
    $stmt->bind_result($receiptID);
    $stmt->fetch();
    $stmt->close();

    // Prepare and execute the SQL query to delete the order line
    $stmtDelete = $this->dh->db_obj->prepare("DELETE FROM `orderlines` WHERE `id` = ?");
    $stmtDelete->bind_param("i", $orderLineID);

    // Execute the delete statement
    if ($stmtDelete->execute()) {
        // Prepare and execute the SQL query to count the order lines for the receipt
        $stmtCount = $this->dh->db_obj->prepare("SELECT COUNT(*) FROM `orderlines` WHERE `receipt_id` = ?");
        $stmtCount->bind_param("i", $receiptID);
        $stmtCount->execute();
        $stmtCount->bind_result($orderLineCount);
        $stmtCount->fetch();
        $stmtCount->close();

        if ($orderLineCount === 0) {
            // The receipt has been deleted
            $stmtReceiptDelete = $this->dh->db_obj->prepare("DELETE FROM `receipts` WHERE `id` = ?");
            $stmtReceiptDelete->bind_param("i", $receiptID);
            $stmtReceiptDelete->execute();
            $stmtReceiptDelete->close();

            $result['success'] = "The receipt with ID $receiptID has been deleted.";
        } else {
            // The receipt still exists
            $result['success'] = "The receipt with ID $receiptID still exists.";
        }
    } else {
        $result["error"] = "Order line could not be deleted!";
    }

    // Close the connection and return the array
    $stmtDelete->close();
    return $result;
}
